{"version":3,"sources":["../../../app/controller/jwt/checkToken.js"],"names":["JWTClass","type","token","err","msg","decode","verify","require","bundle","checkRules","payload","request","exp","Date","getTime","module","exports"],"mappings":"AAAA;AACA;;;;;;;;;;AAOA;;;;;;;;IAEMA,Q;;;;;;;;AACJ;;;;;iEAKsBC,I,EAAMC,K;;;;;;oBACvBD,SAAS,C;;;;;+CACH,EAACE,KAAK,KAAN,EAAaC,KAAK,uBAAIC,MAAJ,CAAWH,KAAX,CAAlB,E;;;;qBACU,uBAAII,MAAJ,CAAWJ,KAAX,EAAkBK,QAAQ,0BAAR,EAAoCL,KAAtD,C;;;AAAfM,oB;+CACGC,WAAWD,OAAO,CAAP,CAAX,EAAsBA,OAAO,CAAP,CAAtB,C;;;;;;;;;;;;;;AAIX;;;;;;;AAKA,IAAMC,aAAa,SAAbA,UAAa,CAACC,OAAD,EAAUC,OAAV,EAAsB;AACvC,MAAGD,QAAQE,GAAR,GAAc,IAAIC,IAAJ,GAAWC,OAAX,EAAjB,EAAuC;AACrC,WAAO,EAACX,KAAK,IAAN,EAAYC,KAAK,iBAAjB,EAAP;AACD;AACD,SAAO,EAACD,KAAK,KAAN,EAAaC,KAAKM,OAAlB,EAAP;AACD,CALD;;AAOAK,OAAOC,OAAP,GAAiBhB,QAAjB","file":"checkToken.js","sourcesContent":["'use strict'\n/**\n* Last Date Updated: 05.04.17\n* @name controller/jwt/checkToken\n* @author Cooper Campbell\n* This routes the home api route '/'.\n* This depends on the jsonwebtoken.\n**/\nimport jwt from 'jsonwebtoken';\n\nclass JWTClass {\n  /**\n  * ensureTokenAuthentic jwtClass - Logic for determining the validity of a token and decoding.\n  * @param type - this is either 0 or 1, 0 for just decoding and 1 for verifying and decoding.\n  * @return A JSON containing the payload or an error msg.\n  **/\n  *ensureTokenAuthentic(type, token) {\n    if(type === 0)\n      return {err: false, msg: jwt.decode(token)};\n    let bundle = yield jwt.verify(token, require('./../../config/auth.json').token);\n    return checkRules(bundle[0], bundle[1]);\n  }\n}\n\n/**\n* This is a private function used to check the rules that we have set in place\n*   I.E. Checking the expiration date to make sure that the expiration date is not passed,\n**    or checking the IP to make sure it originated from the same user.\n**/\nconst checkRules = (payload, request) => {\n  if(payload.exp < new Date().getTime()) {\n    return {err: true, msg: 'JWT has expired'};\n  }\n  return {err: false, msg: payload};\n}\n\nmodule.exports = JWTClass;\n"]}