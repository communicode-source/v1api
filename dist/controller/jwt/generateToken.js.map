{"version":3,"sources":["../../../app/controller/jwt/generateToken.js"],"names":["json","iss","exp","expiresIn","sign","require","token","Date","getTime","numMin"],"mappings":";;;;;;AAAA;;;;;;AAEA;;;;kBAIe,UAACA,IAAD,EAAU;AACvBA,OAAKC,GAAL,GAAc,aAAd;AACAD,OAAKE,GAAL,GAAcC,UAAU,EAAV,CAAd;AACA,SAAO,uBAAIC,IAAJ,CAASJ,IAAT,EAAeK,QAAQ,0BAAR,EAAoCC,KAAnD,CAAP;AACD,C;;AAED;;;AACA,IAAMH,YAAY,SAAZA,SAAY;AAAA,SAAU,IAAII,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,OAAX,KAAuBC,SAAO,KAAvC,EAA8CD,OAA9C,EAAV;AAAA,CAAlB","file":"generateToken.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\n/** @param payload: require. This is a valid JSON to be encoded.\n* Returns the encoded JWT.\n* Depends on jsonwebtoken.\n**/\nexport default (json) => {\n  json.iss    = 'Communicode';\n  json.exp    = expiresIn(15);\n  return jwt.sign(json, require('./../../config/auth.json').token)\n}\n\n// Determines the expiration date.\nconst expiresIn = numMin => new Date(new Date().getTime() + numMin*60000).getTime();\n"]}