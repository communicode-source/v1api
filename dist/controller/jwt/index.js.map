{"version":3,"sources":["../../../app/controller/jwt/index.js"],"names":["JWTController","payload","err","msg","token","check","ensureTokenAuthentic","next","value","e","checkJwtError","q","name","console","log","message"],"mappings":"AAAA;;AAEA;;;;;;;AAOA;;;;;;;;AAGA;;;AAFA;;;;AAGA;;;;;;;;IAGMA,a;;;;;;;;AACJ;;;;;6BAKSC,O,EAAS;AAChB,aAAO;AACLC,aAAK,KADA;AAELC,aAAK,6BAASF,OAAT;AAFA,OAAP;AAID;;AAED;;;;;;;;2BAKOG,K,EAAO;AACZ,UAAI;AACF,YAAMC,QAAQ,2BAAiBC,oBAAjB,CAAsC,CAAtC,EAAyCF,KAAzC,CAAd;AACA,YAAMH,UAAWI,MAAME,IAAN,GAAaC,KAA9B;AACA,eAAQP,QAAQE,GAAR,KAAgB,IAAjB,GAAyBF,OAAzB,GAAmC,EAAEC,KAAK,IAAP,EAAaC,KAAK,sBAAlB,EAA1C;AACD,OAJD,CAKA,OAAOM,CAAP,EAAU;AACR,eAAOC,cAAcD,CAAd,CAAP;AACD;AACF;;AAED;;;;;;;;;;0BAOML,K,EAAOO,C,EAAG;AACd,UAAI;AACF,YAAMN,QAAQ,2BAAiBC,oBAAjB,CAAsC,CAAtC,EAAyCF,KAAzC,CAAd;AACA,YAAMH,UAAUI,MAAME,IAAN,GAAaC,KAA7B;AACA,eAAOH,MAAME,IAAN,CAAW,CAACN,OAAD,EAAUU,CAAV,CAAX,EAAyBH,KAAhC;AACD,OAJD,CAKA,OAAMC,CAAN,EAAS;AACP,eAAOC,cAAcD,CAAd,CAAP;AACD;AACF;;;;;;kBAGY,IAAIT,aAAJ,E;;AAEf;;;;;;AAMA,IAAMU,gBAAgB,SAAhBA,aAAgB,CAACD,CAAD,EAAO;AAC3B,MAAGA,EAAEG,IAAF,KAAW,mBAAd,EACEC,QAAQC,GAAR,CAAYL,CAAZ;;AAEF,SAAO;AACLP,SAAK,IADA;AAELC,SAAMM,EAAEG,IAAF,KAAW,mBAAZ,GAAmCH,EAAEM,OAArC,GAA+C;AAF/C,GAAP;AAID,CARD","file":"index.js","sourcesContent":["'use strict'\n\n/**\n * @name jwtController\n * @author Cooper Campbell\n * Created at: 5/5/2017\n * A controller to handle logic for the JWT routes.\n**/\n\n// Require functions to verify and decode tokens.\nimport checkToken from './checkToken';\n\n// Require function to generate tokens.\nimport genToken from './generateToken';\n\n\nclass JWTController {\n  /**\n   * generate jwtController - Logic for /jwt/gen route\n   * @param payload - JSON to be encoded.\n   * @return JWS - Signed JWT token for distribution.\n  **/\n  generate(payload) {\n    return {\n      err: false,\n      msg: genToken(payload)\n    };\n  }\n\n  /**\n  * decode jwtController - Logic for the /jwt/decode/:token route.\n  * @param token - this is the JWS to have the payload unencrypted.\n  * @return the JSON with err of false/true and a msg of either the decoded json or the error.\n  **/\n  decode(token) {\n    try {\n      const check = new checkToken().ensureTokenAuthentic(0, token);\n      const payload =  check.next().value;\n      return (payload.msg !== null) ? payload : { err: true, msg: 'Could not decode JWT' };\n    }\n    catch (e) {\n      return checkJwtError(e);\n    }\n  }\n\n  /**\n  * check jwtController - Logic for the /jwt/check/:token route.\n  * @param token - this is the JWS to be verified and decoded.\n  * @param q - Express request object (normally would be called request or req).\n  * @return A JSON with an err of true/false and a msg of either the\n  **    decoded token payload or an error message.\n  **/\n  check(token, q) {\n    try {\n      const check = new checkToken().ensureTokenAuthentic(1, token);\n      const payload = check.next().value;\n      return check.next([payload, q]).value;\n    }\n    catch(e) {\n      return checkJwtError(e);\n    }\n  }\n}\n\nexport default new JWTController();\n\n/**\n * Private function that checks if the error thrown was by JWT or not.\n * if it was thrown by JWT then it becomes the msg, if not just return\n * something went wrong' and console.log the message.\n**/\n\nconst checkJwtError = (e) => {\n  if(e.name !== 'JsonWebTokenError')\n    console.log(e);\n\n  return {\n    err: true,\n    msg: (e.name === 'JsonWebTokenError') ? e.message : 'Something went wrong'\n  };\n}\n"]}