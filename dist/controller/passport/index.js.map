{"version":3,"sources":["../../../app/controller/passport/index.js"],"names":["userModel","require","userHandler","module","exports","passportFindOrCreate","profile","done","findOne","provider","id","err","user","newUser","createUser","email","providerid","accounttype","fname","lname","then","catch","console","log","passportCreateLocalUser","req","password","dbHandler","find","data","setPassword","passportLogInCurrentUser","validPassword"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\n\nconst userModel       = require('./../../db/model/user');\nconst userHandler     = require('./../../db/handler/user');\n\n\nmodule.exports = {\n\n  passportFindOrCreate(profile, done) {\n    userModel.findOne({ // Sees if user is already in DB.\n      'provider'         : profile.provider,\n      'providerid'       : profile.id,\n    }, function(err, user) {\n      if(err){ // Return if there is an error.\n        return done(err, null);\n      }\n\n      if(user) { // Return an existing user if there is one.\n        return done(null, user);\n      } else { // Make that new user.\n        const newUser = new userHandler();\n        newUser.createUser({\n          email: profile.email,\n          providerid: profile.id,\n          accounttype: false,\n          provider: profile.provider,\n          fname: profile.fname,\n          lname: profile.lname,\n          })\n          .then(newUser => {\n            return done(null, newUser);\n          }).catch(err => {\n            console.log(err);\n            return done(null, newUser);\n          });\n      }\n    });\n  },\n\n  passportCreateLocalUser(req, email, password, done) {\n    let dbHandler = new userHandler();\n    let user = dbHandler.find({'email': email, 'provider': 'local'});\n\n    user.then(user => {\n      if(user)\n        return done(null, false);\n\n      const data = {\n        provider: 'local',\n        email: email,\n        accounttype: (req.accounttype) ? req.accounttype : 0,\n        providerid: null,\n        password: dbHandler.setPassword(password),\n      };\n\n      dbHandler.createUser(data).then(newUser => {\n        return done(null, newUser);\n      }).catch(err => {\n        console.log(err);\n        return done(err, dbHandler);\n      });\n\n    }).catch(err => {\n      return done(err);\n    });\n  },\n\n  passportLogInCurrentUser(email, password, done) {\n    userModel.findOne({'email': email, 'provider' : 'local'}, function(err, user) { // Finding the user.\n      if(err)\n        throw new err;\n      if(!user){ // Makes sure the user exists.\n        return done(null, false);\n      }\n      if(!user.validPassword(password)) // Validate password.\n        return done(null, false);\n\n      return done(null, user); // Return the user.\n    });\n  }\n\n\n}\n"]}