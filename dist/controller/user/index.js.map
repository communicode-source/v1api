{"version":3,"sources":["../../../app/controller/user/index.js"],"names":["UserController","req","res","indexOf","body","provider","statusCode","dbHandler","authenticate","SC","data","query","email","providerid","addQuery","readUsers","users","verifyLocalLoginUser","verifyExternalUser","status","console","log","controller"],"mappings":"AAAA;;AAEA;;;;;;;AAOA;;;;;;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;;;;;AADA;;;IAIMA,c;;;;;;;;;;;;;AAEJ;;;;;;4EAKgBC,G,EAAKC,G;;;;;;sBAChB,CAAC,UAAD,EAAa,QAAb,EAAuB,OAAvB,EAAgCC,OAAhC,CAAwCF,IAAIG,IAAJ,CAASC,QAAjD,MAA+D,CAAC,C;;;;;iDAC1D,uBAAa,KAAKC,UAAL,CAAgB,OAAhB,CAAb,EAAuC,cAAvC,C;;;AAEHC,yB,GAAY,oB;AACdC,4B,WAAcC,E,WAAIC,I;;;AAIpB;AACMC,qB,GAASV,IAAIG,IAAJ,CAASC,QAAT,IAAqB,OAAtB,GACV,EAACA,UAAU,OAAX,EAAoBO,OAAOX,IAAIG,IAAJ,CAASQ,KAApC,EADU,GAEV,EAACC,YAAYZ,IAAIG,IAAJ,CAASS,UAAtB,EAAkCR,UAAUJ,IAAIG,IAAJ,CAASC,QAArD,E;;uBAGgBE,UAAUO,QAAV,CAAmBH,KAAnB,EAA0BI,SAA1B,E;;;AAAdC,qB;;;AAENR,+BAAgBP,IAAIG,IAAJ,CAASC,QAAT,IAAqB,OAAtB,GACXY,qBAAqBhB,GAArB,EAA0Be,KAA1B,EAAiCT,SAAjC,CADW,GAEXW,mBAAmBF,KAAnB,CAFJ;;AAKAP,qBAAK,KAAKH,UAAL,CAAgBE,aAAaW,MAA7B,CAAL;AACAT,uBAAQD,MAAM,OAAP,GAAkBD,aAAaE,IAA/B,GAAsC,0BAAcF,aAAaE,IAA3B,CAA7C;;;;;;;;;AAGAU,wBAAQC,GAAR;AACAZ,qBAAK,KAAKH,UAAL,CAAgB,OAAhB,CAAL;AACAI,uBAAO,4BAAP;;;iDAGK,uBAAaD,EAAb,EAAiBC,IAAjB,C;;;;;;;;;;;;;;;;;;;;;AAMJ,IAAIY,kCAAa,IAAItB,cAAJ,EAAjB","file":"index.js","sourcesContent":["'use strict'\n\n/**\n * @name UserController\n * @author Cooper Campbell\n * Created at: 5/19/2017\n * A controller to handle the login, update, logout, and sign up of users.\n**/\n\n// Require the Handler for the user.\nimport UserHandler from './../../db/handler/user';\nimport Response from './../Response.js';\n\n// Utilities for the logins and sign ups because they contain a lot of logic.\nimport {LoginDataPull, verifyLoginUser} from './../../utils';\n\n\nclass UserController extends Response {\n\n  /**\n   * User Login - Logic for login routes.\n   * @param req - Express Request object\n   * @param res - Express Response object\n  **/\n  async loginUser(req, res) {\n    if(['facebook', 'google', 'local'].indexOf(req.body.provider) === -1)\n      return new Response(this.statusCode['error'], 'Mutated data');\n\n    const dbHandler = new UserHandler();\n    let authenticate, SC, data;\n\n\n    try {\n      // this is an abnoxious ternary but it prevents two other if statements.\n      const query = (req.body.provider == 'local')\n        ? {provider: 'local', email: req.body.email}\n        : {providerid: req.body.providerid, provider: req.body.provider};\n\n\n      const users = await dbHandler.addQuery(query).readUsers();\n\n      authenticate = (req.body.provider == 'local')\n        ? verifyLocalLoginUser(req, users, dbHandler)\n        : verifyExternalUser(users);\n\n\n      SC = this.statusCode[authenticate.status];\n      data = (SC == 'error') ? authenticate.data : LoginDataPull(authenticate.data);\n\n    } catch(e) {\n      console.log(e);\n      SC = this.statusCode['error'];\n      data = 'Internal processing error.';\n    }\n\n    return new Response(SC, data);\n\n  }\n}\n\n\nexport let controller = new UserController();\n"]}