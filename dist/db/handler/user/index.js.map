{"version":3,"sources":["../../../../app/db/handler/user/index.js"],"names":["Promise","require","UserHandler","user","ready","query","modified","update","prepFail","model","findOne","exec","data","save","json","id","things","_id","$set","find","pw","generateHash","userModel","validPassword","extent","module","exports"],"mappings":"AAAA;;AAEA;;;;;;;AAOA;;;;AACA;;;;AACA;;;;;;;;AAEA;AACA,mBAASA,OAAT,GAAoBC,QAAQ,UAAR,CAApB;;IAGMC,W;;AAEJ;AACA,yBAAc;AAAA;;AACZ,SAAKC,IAAL,GAAwB,EAAxB;AACA,SAAKC,KAAL,GAAwB,KAAxB;AACA,SAAKC,KAAL,GAAwB,EAAxB;AACA,SAAKC,QAAL,GAAwB,EAAxB;AACA,SAAKC,MAAL,GAAwB,EAAxB;AACA,SAAKC,QAAL,GAAwB,IAAxB;AACA,SAAKC,KAAL;AACD;;AAED;;;;;;;;yBAIKJ,K,EAAO;AACV,aAAO,KAAKI,KAAL,CAAWC,OAAX,CAAmBL,KAAnB,EAA0BM,IAA1B,EAAP;AACD;AACD;;;;;;;+BAIWC,I,EAAM;AACf,aAAO,mBAASA,QAAM,KAAKT,IAApB,EAA0BU,IAA1B,EAAP;AACD;AACD;;;;;;;6BAISC,I,EAAM;AACb,WAAKT,KAAL,GAAaS,IAAb;AACA,aAAO,IAAP;AACD;AACD;;;;;;;;+BAKWC,E,EAAIC,M,EAAQ;AACrB,aAAO,eAAKT,MAAL,CAAY,EAACU,KAAMF,MAAM,KAAKZ,IAAL,CAAUc,GAAvB,EAAZ,EAA0C,EAACC,MAAMF,MAAP,EAA1C,EAA0DL,IAA1D,EAAP;AACD;AACD;;;;;;;;iCAKaN,K,EAAO;AAClB,aAAO,eAAKE,MAAL,CAAYF,KAAZ,CAAP;AACD;;AAED;;;;;;;8BAIU;AACR,aAAO,eAAKc,IAAL,CAAU,EAAV,EAAcR,IAAd,EAAP;AACD;AACD;;;;;;;gCAIY;AACV,aAAO,eAAKQ,IAAL,CAAU,KAAKd,KAAf,EAAsBM,IAAtB,EAAP;AACD;;AAED;;;;;;;iCAIaS,E,EAAI;AACf,aAAO,eAAKC,YAAL,CAAkBD,EAAlB,CAAP;AACD;AACD;;;;;;;;kCAKcA,E,EAAIE,S,EAAW;AAC3B,aAAOA,UAAUC,aAAV,CAAwBH,EAAxB,CAAP;AACD;AACD;;;;;;;;4BAKQI,M,EAAQ;AACd,WAAKpB,KAAL,GAAa,KAAb;AACA,WAAKC,KAAL,GAAwB,EAAxB;AACA,WAAKC,QAAL,GAAwB,EAAxB;AACA,WAAKC,MAAL,GAAwB,EAAxB;AACA,WAAKC,QAAL,GAAwB,IAAxB;AACA,UAAGgB,MAAH,EACE,KAAKrB,IAAL,GAAY,EAAZ;AACF,aAAO,IAAP;AACD;;;;;;AAGHsB,OAAOC,OAAP,GAAiBxB,WAAjB","file":"index.js","sourcesContent":["'use strict'\n\n/**\n * @name UserController\n * @author Cooper Campbell\n * Created at: 5/19/2017\n * A controller to handle the login, update, logout, and sign up of users.\n**/\n\n// Include mongoose and the mongoose model of the user.\nimport mongoose from 'mongoose';\nimport User from './../../model/user';\n\n// I don't know why this won't work globally.\nmongoose.Promise  = require('bluebird');\n\n\nclass UserHandler {\n\n  // This just instantiates some class variables.\n  constructor() {\n    this.user             = {};\n    this.ready            = false;\n    this.query            = {};\n    this.modified         = [];\n    this.update           = {};\n    this.prepFail         = null;\n    this.model            = User;\n  }\n\n  /**\n  *  @param query, this is what you want to search for.\n  *  @return Promise, mongoose promise that returns the data from the db.\n  **/\n  find(query) {\n    return this.model.findOne(query).exec();\n  }\n  /**\n  *  @param data, this is what the user will be created with. It is optional so long as you have provided a this.user somewhere else.\n  *  @return Mongoose Model of user, this is the user that you just saved.\n  **/\n  createUser(data) {\n    return new User(data||this.user).save();\n  }\n  /**\n  *  @param json, This is what you will eventually search for.\n  *  @return this, this object so that you can chain the next call.\n  **/\n  addQuery(json) {\n    this.query = json;\n    return this;\n  }\n  /**\n  *  @param id, this is the id of the user you want to update.\n  *  @param things, these are the things you wish to have updated.\n  *  @return Promise, mongoose promise that returns the status fromt he db.\n  **/\n  updateUser(id, things) {\n    return User.update({_id: (id || this.user._id)}, {$set: things}).exec()\n  }\n  /**\n  *  WARNING There is no safety in place here to ensure that everything goes as it should.\n  *  @param query, everything that goes into the update function.\n  *  @return I don't think this actually returns anything.\n  **/\n  strictUpdate(query) {\n    return User.update(query);\n  }\n\n  /**\n  *  This returns everything from the user db. Don't actually use this during production because we don't want to dump all users to random people.\n  *  @return Promise, mongoose promise that returns the data from the db.\n  **/\n  readAll() {\n    return User.find({}).exec();\n  }\n  /**\n  *  Relies on you calling addQuery first! This is what will be searched for.\n  *  @return Promise, mongoose promise that returns the data from the db.\n  **/\n  readUsers() {\n    return User.find(this.query).exec();\n  }\n\n  /**\n  *  @param pw, This is the password to be encrypted.\n  *  @return The encrypted password for insertion to the db.\n  **/\n  makePassword(pw) {\n    return User.generateHash(pw);\n  }\n  /**\n  *  @param pw, the password the user typed in.\n  *  @param userModel, this is hte mongodb object that has the user from the db.\n  *  @return Boolean, whether or not the passwords match.\n  **/\n  checkPassword(pw, userModel) {\n    return userModel.validPassword(pw)\n  }\n  /**\n  *  This function resets the class for use with another user/query without have to do it manually or creating another handler instance.\n  *  @param extent, true/false. Whether or not to clear this.user\n  *  @return this, for use when chaining.\n  **/\n  cleanup(extent) {\n    this.ready = false;\n    this.query            = {};\n    this.modified         = [];\n    this.update           = {};\n    this.prepFail         = null;\n    if(extent)\n      this.user = {};\n    return this;\n  }\n\n}\nmodule.exports = UserHandler;\n"]}