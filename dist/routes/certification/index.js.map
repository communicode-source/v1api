{"version":3,"sources":["../../../app/routes/certification/index.js"],"names":["router","Router","route","get","req","res","index","response","status","getStatusCode","json","getJSONData","certify","msg"],"mappings":";;;;;;AAAA;;;;AAGA;;;;;;;;AADA;;;AAGA,IAAMA,SAAS,kBAAQC,MAAR,EAAf;;AAEAD,OAAOE,KAAP,CAAa,GAAb;;AAEA;AAFA,CAGGC,GAHH;AAAA,uDAGQ,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,wBAAWC,KAAX,CAAiBF,GAAjB,EAAsBC,GAAtB,CADnB;;AAAA;AACEE,oBADF;;;AAGJF,gBAAIG,MAAJ,CAAWD,SAASE,aAAT,EAAX,EAAqCC,IAArC,CAA0CH,SAASI,WAAT,EAA1C;;AAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHR;;AAAA;AAAA;AAAA;AAAA;;AASA;AACAX,OAAOE,KAAP,CAAa,MAAb,EAEGC,GAFH;AAAA,wDAEQ,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,wBAAWO,OAAX,CAAmBR,GAAnB,EAAwBC,GAAxB,CADnB;;AAAA;AACEE,oBADF;;;AAGJF,gBAAIG,MAAJ,CAAWD,SAASE,aAAT,EAAX,EAAqCC,IAArC,CAA0CH,SAASI,WAAT,EAA1C;;AAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFR;;AAAA;AAAA;AAAA;AAAA;;AAQAX,OAAOE,KAAP,CAAa,cAAb;AACA;AADA,CAEGC,GAFH;AAAA,wDAEQ,kBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmB,wBAAWO,OAAX,CAAmBR,GAAnB,EAAwBC,GAAxB,CADnB;;AAAA;AACEE,oBADF;;AAAA,kBAEAA,SAASI,WAAT,MAA0B,IAF1B;AAAA;AAAA;AAAA;;AAGFN,gBAAIG,MAAJ,CAAW,GAAX,EAAgBE,IAAhB,CAAqB;AACnBG,mBAAK;AADc,aAArB;AAHE;;AAAA;AAQFR,gBAAIG,MAAJ,CAAWD,SAASE,aAAT,EAAX,EAAqCC,IAArC,CAA0CH,SAASI,WAAT,EAA1C;AARE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFR;;AAAA;AAAA;AAAA;AAAA;;kBAeeX,M","file":"index.js","sourcesContent":["import express, { Router } from 'express';\n\n//Require the certificationController\nimport controller from './../../controller/certification';\n\nconst router = express.Router();\n\nrouter.route('/')\n\n//lists all the certified nonprofits\n  .get( async (req, res) => {\n    const response = await controller.index(req, res);\n\n    res.status(response.getStatusCode()).json(response.getJSONData());\n  });\n\n//route that has the ID as the input and returns information about a specific nonprofit\nrouter.route('/:id')\n\n  .get( async (req, res) => {\n    const response = await controller.certify(req, res);\n\n    res.status(response.getStatusCode()).json(response.getJSONData());\n  });\n\nrouter.route('/certify/:id')\n//returns true/false based on the status of isCertifid of the nonprofits account\n  .get( async (req, res) => {\n    const response = await controller.certify(req, res);\n    if (response.getJSONData() == null){\n      res.status(200).json({\n        msg: 'False'\n      });\n      return;\n    } else {\n      res.status(response.getStatusCode()).json(response.getJSONData());\n      return;\n    }\n  });\n\nexport default router;\n"]}